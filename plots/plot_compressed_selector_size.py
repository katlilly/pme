#!/usr/bin/python3

from matplotlib import pyplot as plt
from numpy import genfromtxt
import numpy

# read in data generated by get_columns_and_widths.cpp
data = genfromtxt("selector_compressed_size.txt", delimiter=',')

# variables from data
listnumbers = data[:,0]
lengths = data[:,1]
payload_bytes = data[:,2]
num_column_widths = data[:,3]
compressed_sel_bytes = data[:,4]

sizes_old = payload_bytes.copy()
for i in range(len(sizes_old)):
    sizes_old[i] += 4
print(sizes_old)
    
sizes_new = payload_bytes.copy()
for i in range(len(sizes_new)):
    sizes_new[i] = sizes_new[i] + compressed_sel_bytes[i]
print(sizes_new)

size_difference = payload_bytes.copy()
for i in range(len(size_difference)):
    size_difference[i] = sizes_new[i] - sizes_old[i]

print(size_difference)

improvement = payload_bytes.copy()
for i in range(len(improvement)):
    improvement[i] = sizes_old[i] / sizes_new[i]
print(improvement)
    


plt.plot(lengths, lengths)
plt.plot(sizes_old, sizes_new, 'o')
plt.xlabel('old size')
plt.ylabel('new size')
plt.ylim([0, 4000])
plt.xlim([0, 4000])
plt.savefig('newandbetter.png')
plt.close()

# plot the data
plt.plot(payload_bytes, compressed_sel_bytes, 'o')
plt.xlabel('bytes in payload')
plt.ylabel('bytes in compressed selectors')
plt.savefig('payload_vs_selector.png')
plt.close()

payload_per_selector = payload_bytes / compressed_sel_bytes
plt.plot(lengths, payload_per_selector, 'o')
plt.xlabel('list length')
plt.ylabel('payload bytes per selector byte')
plt.xlim([100, 40000])
plt.ylim([0, 100])
plt.savefig('psratio_vs_length.png')
plt.close()


selector_per_payload = compressed_sel_bytes / payload_bytes
plt.plot(lengths, selector_per_payload, 'o')
plt.xlabel('list length')
plt.ylabel('selector bytes per payload byte')
#plt.xlim([100, 40000])
plt.savefig('selectorbytes_per_payload_byte.png')
plt.close()

#plt.plot(num_column_widths, compressed_sel_bytes, 'o')
#plt.xlabel('number of columns in selector')
#plt.ylabel('bytes in compressed selectors')

#plt.legend(['short lists (<100)', 'long lists (>10,000)', '8bit limit','16bit limit', '32bit limit'])

plt.plot(lengths, improvement, 'o')
plt.plot(num_column_widths, improvement, 'o')
#plt.xlim([1, 400])
#plt.ylim([0.98, 1.02])
plt.legend(['list length','number of columns'])
plt.savefig('improvement.png')
#plt.close()


plt.show()
